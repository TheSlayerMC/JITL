plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
}

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.buildProps = prop
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.entry //public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

    configureEach {

        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', "jitl"

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "jitl"
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', "jitl"
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "mezz.jei:jei-" + minecraft_version + "-neoforge:" + jei_version

    implementation "maven.modrinth:just-enough-resources-jer:" + jer_version

    runtimeOnly "top.theillusivec4.curios:curios-neoforge:" + curios_version
    compileOnly "top.theillusivec4.curios:curios-neoforge:" + curios_version + ":api"

    implementation "software.bernie.geckolib:geckolib-neoforge-" + gekolib_version

    compileOnly "vazkii.patchouli:Patchouli:" + patchouli_version + ":api"
    runtimeOnly "vazkii.patchouli:Patchouli:" + patchouli_version
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
